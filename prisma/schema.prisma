// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserDesign    UserDesign[]
  Images        Images[]
  Prints        Prints[]
  isAdmin       Boolean      @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserDesign {
  id String @id @default(cuid())

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  UserDesignImages UserDesignImages[]
  UserDesignModels UserDesignModels[]

  description String?
  name        String?
  isPublic    Boolean @default(false)
  isDeleted   Boolean @default(false)

  price  Decimal  @default(0)
  Prints Prints[]
}

model Prints {
  id           String     @id @default(cuid())
  UserDesign   UserDesign @relation(fields: [userDesignId], references: [id])
  userDesignId String
  isFulfilled  Boolean    @default(false)
  isCancelled  Boolean    @default(false)

  description String?

  WhoPrints User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  PrintsImages    PrintsImages[]
  PrintSettings   PrintSettings  @relation(fields: [printSettingsId], references: [id])
  printSettingsId String
  Printer         Printers       @relation(fields: [printerId], references: [id])
  printerId       String
}

model Printers {
  id String @id @default(cuid())

  name        String
  description String?
  location    String?
  isDeleted   Boolean @default(false)

  Prints                Prints[]
  PrintersPrintSettings PrintersPrintSettings[]
}

model PrintersPrintSettings {
  printers        Printers      @relation(fields: [printersId], references: [id], onDelete: Cascade)
  printersId      String
  printSettings   PrintSettings @relation(fields: [printSettingsId], references: [id], onDelete: Cascade)
  printSettingsId String

  @@unique([printersId, printSettingsId])
}

model PrintSettings {
  id     String   @id @default(cuid())
  params Json
  Prints Prints[]

  PrintersPrintSettings PrintersPrintSettings[]
}

model PrintsImages {
  prints   Prints @relation(fields: [printsId], references: [id], onDelete: Cascade)
  printsId String
  image    Images @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId  String

  @@unique([printsId, imageId])
}

model UserDesignModels {
  id           String     @id @default(cuid())
  UserDesign   UserDesign @relation(fields: [userDesignId], references: [id])
  userDesignId String
  model        String
  description  String?
}

model UserDesignImages {
  userDesign   UserDesign @relation(fields: [userDesignId], references: [id], onDelete: Cascade)
  userDesignId String
  image        Images     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId      String

  @@unique([userDesignId, imageId])
}

model Images {
  id     String @id @default(cuid())
  url    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  UserDesignImages UserDesignImages[]
  PrintsImages     PrintsImages[]
}
